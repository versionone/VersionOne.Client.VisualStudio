#!/bin/bash -e
. ./build.properties
if [ -d build-tools ]; then cd build-tools && git fetch && git stash  && git pull && cd ..; else git clone https://github.com/versionone/openAgile-build-tools.git build-tools; fi
source ./build-tools/common.sh

# ---- Produce vsixmanifest -------------------------------------------------
COMPONENTS="VersionOne.VisualStudio.VSPackage"
for COMPONENT_NAME in $COMPONENTS; do
cat > "$WORKSPACE/$COMPONENT_NAME/source.extension.vsixmanifest" <<EOF
<?xml version="1.0" encoding="utf-8"?>
<!-- Auto generated by build.sh at `date -u` -->
<PackageManifest Version="2.0.0" xmlns="http://schemas.microsoft.com/developer/vsx-schema/2011" xmlns:d="http://schemas.microsoft.com/developer/vsx-schema-design/2011">
  <Metadata>
    <Identity Id="9423c8f0-ca04-432e-af2d-89aa9bc5ebe5" Version="$VERSION_NUMBER.$BUILD_NUMBER" Language="en-US" Publisher="VersionOne" />
    <DisplayName>VersionOne Tracker</DisplayName>
    <Description xml:space="preserve">VersionOne Package for Microsoft Visual Studio. For more information about VersionOne, see the VersionOne website at http://www.versionone.com.</Description>
    <MoreInfo>http://www.versionone.com</MoreInfo>
    <License>LICENSE.txt</License>
  </Metadata>
  <Installation>
    <InstallationTarget Version="[11.0,13.0)" Id="Microsoft.VisualStudio.Premium"/>
    <InstallationTarget Version="[11.0,13.0)" Id="Microsoft.VisualStudio.Ultimate"/>
    <InstallationTarget Version="[11.0,13.0)" Id="Microsoft.VisualStudio.Pro"/>
  </Installation>
  <Dependencies>
    <Dependency Id="Microsoft.Framework.NDP" DisplayName="Microsoft .NET Framework" d:Source="Manual" Version="[4.0,4.5)" />
  </Dependencies>
  <Assets>
    <Asset Type="Microsoft.VisualStudio.VsPackage" d:Source="Project" d:ProjectName="%CurrentProject%" Path="|%CurrentProject%;PkgdefProjectOutputGroup|" />
  </Assets>
</PackageManifest>
EOF
done

# ---- Produce .NET Metadata -------------------------------------------------
COMPONENTS="VersionOne.VisualStudio.VSPackage VersionOne.VisualStudio.DataLayer"
for COMPONENT_NAME in $COMPONENTS; do
cat > "$WORKSPACE/$COMPONENT_NAME/Properties/AssemblyInfo.cs" <<EOF
// Auto generated by build.sh at `date -u`

using System;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: AssemblyVersion("$VERSION_NUMBER.$BUILD_NUMBER")]
[assembly: AssemblyFileVersion("$VERSION_NUMBER.$BUILD_NUMBER")]
[assembly: AssemblyInformationalVersion("See $GITHUB_WEB_URL/wiki")]

[assembly: AssemblyProduct("$COMPONENT_NAME")]
[assembly: AssemblyTitle("$COMPONENT_NAME")]
[assembly: AssemblyDescription("$PRODUCT_NAME $COMPONENT_NAME $Configuration Build")]
[assembly: AssemblyCompany("$ORGANIZATION_NAME")]
[assembly: AssemblyCopyright("Copyright $COPYRIGHT_RANGE, $ORGANIZATION_NAME, Licensed under modified BSD.")]

[assembly: AssemblyConfiguration("$Configuration")]
EOF
done

# ---- Clean solution ---------------------------------------------------------

rm -rf $WORKSPACE/*.nupkg
MSBuild.exe $SOLUTION_FILE -m \
  -t:Clean \
  -p:Configuration="$Configuration" \
  -p:Platform="$Platform" \
  -p:Verbosity=Diagnostic

# ---- Refresh nuget packages ---------------------------------------------------------

nuget_packages_refresh

# ---- Build solution using msbuild -------------------------------------------

WIN_SIGNING_KEY="`winpath "$SIGNING_KEY"`"
MSBuild.exe $SOLUTION_FILE \
  -p:SignAssembly=$SIGN_ASSEMBLY \
  -p:AssemblyOriginatorKeyFile=$WIN_SIGNING_KEY \
  -p:RequireRestoreConsent=false \
  -p:Configuration="$Configuration" \
  -p:Platform="$Platform" \
  -p:Verbosity=Diagnostic


# ---- Run Tests --------------------------------------------------------------------------
if [ -z "$NUNIT_XML_OUTPUT" ]
  then
    NUNIT_XML_OUTPUT="nunit-VisualStudioClient-result.xml"
  fi
# Make sure the nunit-console is available first...
NUNIT_CONSOLE_RUNNER=`/usr/bin/find packages | grep "${NUNIT_RUNNER_NAME}\$"`
if [ -z "$NUNIT_CONSOLE_RUNNER" ]
then
echo "Could not find $NUNIT_RUNNER_NAME in the $WORKSPACE/packages folder."
  exit -1
fi

if [ -e /etc/bash.bashrc ] ; then
  # Cygwin specific settings
  $NUNIT_CONSOLE_RUNNER \
    -framework:net-4.5\
    -labels \
    -stoponerror \
    -xml=$NUNIT_XML_OUTPUT \
    `winpath "$WORKSPACE/$TEST_DIR/bin/$Configuration/$TEST_DLL"`
else
  # Msysgit specific settings
  $NUNIT_CONSOLE_RUNNER \
    //framework:net-4.5 \
    //labels \
    //stoponerror \
    //xml=$NUNIT_XML_OUTPUT \
    `winpath "$WORKSPACE/$TEST_DIR/bin/$Configuration/$TEST_DLL"`
fi